{"version":3,"names":[],"mappings":"","sources":["index-macexperiments.html"],"sourcesContent":["<!--\n@license https://github.com/t2ym/i18n-element/blob/master/LICENSE.md\nCopyright (c) 2016, Tetsuya Mori <t2y3141592@gmail.com>. All rights reserved.\n-->\n<html debug>\n  <head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, minimum-scale=1.0, initial-scale=1.0, user-scalable=yes\">\n    <title>i18n-element Proof of Concept Demo</title>\n    <script>\n    window.addEventListener(\"error\", function (e) {\n      console.log(\"Error occured: \" + e.error.message);\n      e.stopPropagation();\n      return false;\n    });\n    console.log('this = ', this);\n    </script>\n    <script src=\"../../../webcomponentsjs/webcomponents-lite.js\"></script>\n<script>\n(function () {\n  function UncamelCase (name) {\n    return name\n      // insert a hyphen between lower & upper\n      .replace(/([a-z0-9])([A-Z])/g, '$1 $2')\n      // space before last upper in a sequence followed by lower\n      .replace(/\\b([A-Z]+)([A-Z])([a-z0-9])/, '$1 $2$3')\n      // replace spaces with hyphens\n      .replace(/ /g, '-')\n      // lowercase\n      .toLowerCase();\n  }\n  function functionName (func) {\n    return typeof func === 'function' ? \n            func.toString().replace(/^[\\S\\s]*?function\\s*/, \"\").replace(/[\\s\\(\\/][\\S\\s]+$/, \"\") :\n            undefined;\n  }\n  if (!window.Define) {\n    Object.defineProperty(window, 'Define', {\n      get: function () {\n        return function (id) {\n          return this.PolymerElements ? this.PolymerElements[id] : undefined;\n        };\n      },\n      set: function (proto) {\n        /*\n        Patterns:\n          a) template id {}\n          b) template id {is}\n          c) document.template id {is}\n          d) template {is}\n          e) {is}\n          f) class Is {template}\n          g) {is,template}\n        */\n        var id;\n        var classId;\n        var obj;\n        var name = proto.name || functionName(proto);\n        var current; // currentScript\n        var template = null;\n        var previous; // previousSibling template\n        var cousin; // dom5.serialize output support\n\n        current = HTMLImports.useNative ? document.currentScript\n                                        : document._currentScript;\n\n        previous = current.previousSibling;\n        while (previous && !previous.tagName) {\n          previous = previous.previousSibling;\n        }\n        if (previous && previous.tagName !== 'template'.toUpperCase()) {\n          previous = null;\n        }\n        if (!previous) {\n          // search for cousin template\n          if (current.parentNode.tagName === 'body'.toUpperCase()) {\n            previous = current.parentNode.previousSibling;\n            while (previous && !previous.tagName) {\n              previous = previous.previousSibling;\n            }\n            if (previous && previous.tagName.toLowerCase() === 'head') {\n              for (var i = 0; i < previous.childNodes.length; i++) {\n                if (previous.childNodes[i].tagName === 'template'.toUpperCase()) {\n                  cousin = previous.childNodes[i];\n                  break;\n                }\n              }\n            }\n          }\n          if (cousin) {\n            previous = cousin;\n          }\n          else {\n            previous = null;\n          }\n        }\n\n        if (!proto.is && (!name || name === 'class' || name === 'Define')) {\n          if (previous) {\n            id = previous.id;\n            if (id) {\n              // Pattern a)\n              template = previous;\n              proto.is = id;\n            }\n          }\n        }\n        else {\n          if (proto.is) {\n            id = proto.is;\n          }\n          else if (typeof proto === 'function' && name) {\n            // ES6 class\n            id = UncamelCase(name);\n            classId = name;\n          }\n          if (!template && proto.template && !name) {\n            // Pattern g)\n            template = proto.template;\n          }\n          if (!proto.template && !template) {\n            // Pattern b), c)\n            template = current.ownerDocument\n                        .querySelector('template[id=' + id + ']') || \n                       document.querySelector('template[id=' + id + ']');\n          }\n          if (!proto.template && !template && previous && !previous.id) {\n            // Pattern d)\n            template = previous;\n            template.id = id;\n          }\n          else {\n            // Pattern e)\n          }\n        }\n\n        if (!id) {\n          throw 'Custom element name is not defined';\n        }\n\n        // register dom-module\n        if (template) {\n          var domModule = document.createElement('dom-module');\n          var assetUrl = new URL(current.baseURI || window.currentImport.baseURI);\n          domModule.appendChild(template);\n          domModule.setAttribute('assetpath', \n                                  assetUrl.pathname.indexOf('.vulcanized.') < 0 ?\n                                    assetUrl.pathname :\n                                      template.hasAttribute('assetpath') ? \n                                      template.getAttribute('assetpath') : \n                                      assetUrl.pathname);\n          domModule.register(id);\n        }\n\n        // register Custom Element\n        this.PolymerElements = this.PolymerElements || {};\n        classId = classId || id.split('-').map(function (word) {\n          return word[0].toUpperCase() + word.substr(1);\n        }).join('');\n        if (this.PolymerElements[id]) {\n          console.warn('Discarding duplicate regitration of custom element ' + id);\n        }\n        else {\n          window[classId] = proto;\n          customElements.define(id, proto);\n          this.PolymerElements[classId] = this.PolymerElements[id];\n        }\n        return this.PolymerElements[id];\n      }\n    });\n  }\n})();\n</script>\n    <script>\n    window.document._querySelector = new Proxy(window.document.querySelector, {\n      apply: function querySelector (target, thisArg, argumentsList) {\n        console.log(target, thisArg, argumentsList);\n        return target.apply(thisArg, argumentsList);\n      },\n      get: function(target, prop, receiver) {\n        console.log('document.querySelector' + prop);\n        return target[prop];\n      }\n    });\n    /*\n    HTMLElement.prototype.constructor = new Proxy(HTMLElement.prototype.constructor, { \n      apply: function(target, thisArg, argumentsList) {\n        console.log('HTMLElement.prototype.constructor', target, thisArg, argumentsList);\n        return target.apply(thisArg, argumentsList);        \n      }\n    });\n    */\n    Object.getPrototypeOf(window.customElements).define = new Proxy(Object.getPrototypeOf(window.customElements).define, {\n      apply: function(target, thisArg, argumentsList) {\n        console.log(target, thisArg, argumentsList);\n        if (argumentsList[0] !== 'dom-module') {\n          argumentsList[1] = new Proxy(argumentsList[1], {\n            construct: function(target, argumentsList, newTarget) {\n              console.log('new ' + target.name + '(', argumentsList, ')');\n              return new (Function.prototype.bind.apply(target, argumentsList));\n            }\n          });\n        }\n        return target.apply(thisArg, argumentsList);\n      }\n    });\n    [ 'Polymer', 'Mixins', 'BaseElements', /* 'Define', */ 'PolymerElements', 'bundles' ].forEach((i) => {\n      try {\n        window[i] = new Proxy(window[i] || Object.create(null), {\n          set: function (target, property, value, receiver) {\n            console.log(i + '[' + property + '] = ', value);\n            return target[property] = value;\n          }\n        });\n      }\n      catch (e) {\n        console.log(e);\n      }\n    });\n    // no more global variables and objects\n    //Object.freeze(window);\n    </script>\n    <link rel=\"import\" href=\"localizable-element.html\">\n    <link rel=\"import\" href=\"i18n-subclass-element.html\">\n    <link rel=\"import\" href=\"i18n-thin-element.html\">\n    <link rel=\"import\" href=\"i18n-legacy-element.html\">\n  </head>\n  <body>\n    <h3>i18n-element Proof of Concept Demo</h3>\n    <localizable-element id=\"el1\"></localizable-element><br>\n    <i18n-subclass-element id=\"el2\"></i18n-subclass-element><br>\n    <i18n-thin-element id=\"el3\"></i18n-thin-element><br>\n    <i18n-legacy-element id=\"el4\"></i18n-legacy-element>\n\n    <script>\n      HTMLImports.whenReady(function () {\n        console.log('HTMLImports.whenReady()');\n        [ 'el1', 'el2', 'el3' /*, 'el4'*/ ].forEach((id) => {\n          document.getElementById(id).lang = 'ja';\n        });\n      });\n\n      function printPrototype(obj, prefix) {\n  prefix = prefix || '';\n  var name = obj && obj.constructor && obj.constructor.name ? obj.constructor.name : ''\n  if (name === 'Function' && obj.name) {\n    name = 'class ' + obj.name;\n  }\n  var indent = prefix + ':' + name;\n\n  if (obj) {\n    /*\n    Object.getOwnPropertyNames(obj).forEach(function (key) {\n    //for(var key in obj) {\n      if(obj.hasOwnProperty(key)) {\n        try {\n          console.log(indent, key, \": \", obj[key]);\n        }\n        catch (e) {\n          console.log(indent, key, \": \", \"Not Accessible\", e);\n        }\n      }\n    });\n    */\n    console.log(indent, Object.getOwnPropertyNames(obj));\n  }\n  else {\n    console.log(indent, \": \", obj);\n  }\n  \n  if(obj) {\n    if(Object.getPrototypeOf) {\n      printPrototype(Object.getPrototypeOf(obj), indent);\n    } else if(obj.__proto__) {\n      printPrototype(obj.__proto__, indent);\n    }\n  }\n}\n\n    /*\n    get __data() {\n      const is = this.is;\n      console.log('=========================== get ' + this.is + '.__data', this.___data);\n      return this.___data;\n    }\n    set __data(value) {\n      const is = this.is;\n      console.log('=========================== set ' + this.is + '.__data = ', value);\n      this.___data = new Proxy(value, {\n        get: function(target, prop, receiver) {\n          console.log('=========================== get ' + is + '.__data.' + prop, target[prop]);\n          return target[prop];\n        },\n        set: function(target, prop, value, receiver) {\n          console.log('=========================== set ' + is + '.__data.' + prop + ' = ', value);\n          target[prop] = value;\n          return true;\n        }\n      });\n    }\n    */\n\n\n    </script>\n\n  </body>\n</html>\n"],"file":"index-macexperiments.html","sourceRoot":"/source/"}